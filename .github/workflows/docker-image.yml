name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    runs-on: ubuntu-latest

    # Define your registry and repository here.
    # These are for the GitHub Container registry, you can also use
    # Quay.io or another OCI registry
    env:
      registry: ghcr.io
      username: kulpojke
      repository: download2bucket

    strategy:
      # Even if one docker container build fails we want the others to continue.
      fail-fast: false
      # A matrix of Dockerfile paths and associated tags
      # Dockerfile in root builds to tag latest
      matrix:
        dockerfile: [[Dockerfile, latest]]

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Set Container Tag Normal
      run: |
        container="${{ env.repository }}:${{ matrix.dockerfile[1] }}"
        echo "container=${container}" >> $GITHUB_ENV
        echo "versioned=${container}" >> $GITHUB_ENV
    
      # On a new release create a container with the same tag as the release.
    - name: Set Container Tag Release
      if: github.event_name == 'release'
      run: |
        versioned="${{ env.repository }}:${GITHUB_REF##*/}-${{ matrix.dockerfile[1] }}"
        echo "versioned=${versioned}" >> $GITHUB_ENV

    - name: Build ${{ matrix.dockerfile[1] }}
      run: |
        printf "Preparing to build ${{ env.container }} from ${{ matrix.dockerfile[0] }}"
        if [ ! -f "${{ matrix.dockerfile[0]}}" ]; then
            printf "Dockerfile ${{ matrix.dockerfile[0] }} does not exist"
            exit 1;
        fi
        docker build -f ${{ matrix.dockerfile[0] }} -t ${{ env.container }} -t ${{ env.versioned }} --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) .
        docker images

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.registry }}
        username: ${{ env.username }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Deploy ${{ matrix.dockerfile[1] }}
      # And Don't log push the container on a pull request.
      if: github.event_name != 'pull_request'
      run: docker push ${{ env.container }} ${{ env.versioned }}

    
